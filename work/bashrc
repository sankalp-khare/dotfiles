# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# User specific aliases and functions
# GIT_PROMPT_ONLY_IN_REPO=1
# source ~/.bash-git-prompt/gitprompt.sh

#=-- many of the following aliases/functions are from other folks' bashrcs --=#
# laurent, parth, chunyan
# some I've written/collected myself :)

# print sorted lastlog | sllg # default 7 days | sllg x # last x days
# adapted from https://alexcline.net/2013/01/04/pretty-printing-a-lastlog-list-sorted-by-login-date/
sllg_f() { lastlog -t ${1:-7} | pcregrep -v '(Never Logged In|Username)' | sort -k9,9n -k5,5M -k6,6n -k7,7n | awk -F' ' '{ printf "%-15s %-3s %-2s %-8s %-5s %-4s\n", $1, $5, $6, $7, $8, $9}'; }; alias sllg=sllg_f

export GREP_OPTIONS=--color=auto
alias ls='ls --color=auto --time-style=long-iso'
alias sss='sudo supervisorctl status'

# 50 largest files
alias ldu='sudo du -acSx . | sort -n | tail -n 50'
alias less='less -R -X -i'

# list all crontabs
alias lcrontab-list='(for f in `sudo find /etc/cron.d/ /var/spool/cron -size +0b -type f` ; do sudo sed "s#^#${f##*/}: #" $f ; done ; sudo find /etc/cron.* | sed "s#^#file: #")'

# list listening TCP ports | l(ist) l(istening) tcp (w(ords))
alias lltcp="sudo lsof -iTCP -sTCP:LISTEN -P -n | tail -n +2 | sort -k 9 | awk '{ print \$1,\$9,\$10 }' | column -t | uniq | sort" # numbers for things
alias lltcpw="sudo lsof -iTCP -sTCP:LISTEN | tail -n +2 | sort -k 9 | awk '{ print \$1,\$9,\$10 }' | column -t | uniq | sort" # words for things
# list established tcp connections | l(ist) e(stablished) tcp (w(words))
alias letcp="sudo lsof -iTCP -sTCP:ESTABLISHED -P -n | tail -n +2 | sort -k 9 | awk '{ print \$1,\$9,\$10 }' | column -t | uniq | sort" # numbers for things
alias letcpw="sudo lsof -iTCP -sTCP:ESTABLISHED | tail -n +2 | sort -k 9 | awk '{ print \$1,\$9,\$10 }' | column -t | uniq | sort" # words for things
# list listening UDP ports
alias lludp="sudo lsof -iUDP -P -n | tail -n +2 | sort -k 9 | awk '{ print \$1,\$9,\$10 }' | column -t | uniq" # numbers for things
alias lludpw="sudo lsof -iUDP | tail -n +2 | sort -k 9 | awk '{ print \$1,\$9,\$10 }' | column -t | uniq" # words for things

# process to port
pr2po_f() { sudo netstat -ntpl | grep -P "(\s${1}/|/${1}\s)" ; } ; alias pr2po=pr2po_f

# print java process args one-per-line
jppp_f() { /bin/sed 's# -#\n-#g' | grep --color -E '^|indeed.application=|indeed.base=' ; } ; alias jppp=jppp_f

# tail puppet log
tpl_f() { sudo tail -n ${1:-10} -f /var/log/puppet/puppet.log ; } ; alias tpl=tpl_f
tpl1_f() { sudo tail -n ${1:-10} -f /var/log/puppet/puppet.log.1 ; } ; alias tpl1=tpl1_f
tpl2_f() { sudo tail -n ${1:-10} -f /var/log/puppet/puppet.log.2 ; } ; alias tpl2=tpl2_f
tpl3_f() { sudo tail -n ${1:-10} -f /var/log/puppet/puppet.log.3 ; } ; alias tpl3=tpl3_f
tpl4_f() { sudo tail -n ${1:-10} -f /var/log/puppet/puppet.log.4 ; } ; alias tpl4=tpl4_f

# search for a string in ps output without finding the grep process there
psgrep_f() { ps aux | grep $(echo $1 | sed 's/./[\0]/') ; } ; alias psgrep=psgrep_f

# ipuppet and ipuppet apply
alias ipt='sudo echo; while true; do [ -f /var/lib/puppet/state/agent_catalog_run.lock ] && { echo "Puppet is still running, waiting 10s - `date`"; sudo -v; } || { ipuppet; break; }; sleep 10s; done'
alias ipta='sudo echo; while true; do [ -f /var/lib/puppet/state/agent_catalog_run.lock ] && { echo "Puppet is still running, waiting 10s - `date`"; sudo -v; } || { ipuppet apply; break; }; sleep 10s; done'

# ipuppet and ipuppet apply | but with a dot progress indicator instead of timestamps
function ppp() {
    while [ -f "$(sudo puppet agent --configprint agent_catalog_run_lockfile)" ];
    do echo -n '.' && sleep 10;
    done && ipuppet $@
}

# is puppet enabled?
alias ispe='[ -f $(sudo puppet agent --configprint agent_disabled_lockfile) ] && echo ">> puppet enforcement is disabled" && cat $(sudo puppet agent --configprint agent_disabled_lockfile) || echo ">> puppet enforcement is enabled"'

# pretty print an xml file
function xmlpp() {
    if [[ $# -ne 1 ]]; then
	echo "usage: xmlpp <path-to-xml-file>"
    else
	cd /tmp &>/dev/null
	if [[ $1 != /* ]]; then
	    XML_FILE_PATH=$OLDPWD/$1
	else
	    XML_FILE_PATH=$1
	fi
	xmllint --format ${XML_FILE_PATH} | highlight --out-format=ansi --syntax=xml
	rm -f highlight.css &>/dev/null
	cd - &>/dev/null
    fi
}

# work in progress | port to process
# the additional sort -u ensures the grep is for a single PID (e.g. laurent's version fails when run with argument 22)
po2pr_f() { sudo ps aux | grep -P `sudo netstat -ntpl | grep -P "(tcp|udp)\s.*:${1}\s" | perl -pe 's#.*\s([0-9]+)/\w+#\1#' | sort -u`; } ; alias po2pr=po2pr_f

# coloured manpages
export LESS_TERMCAP_mb=$'\E[01;31m'       # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;74m'  # begin bold
export LESS_TERMCAP_me=$'\E[0m'           # end mode
export LESS_TERMCAP_se=$'\E[0m'           # end standout-mode
export LESS_TERMCAP_so=$'\E[38;5;246m'    # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'           # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underlineo

#=-- everything hereonwards is copied from @maciej's bashrc --=#

#including the following line to make git prompt working
if [ -f /usr/share/git-core/contrib/completion/git-prompt.sh ]; then
    source /usr/share/git-core/contrib/completion/git-prompt.sh
fi

#  Customize BASH PS1 prompt to show current GIT repository and branch.
#  by Mike Stewart - http://MediaDoneRight.com

#  SETUP CONSTANTS
#  Bunch-o-predefined colors.  Makes reading code easier than escape sequences.
#  I don't remember where I found this.  o_O

# Reset
Color_Off="\[\033[0m\]"       # Text Reset

# Regular Colors
#Black="\[\033[0;30m\]"        # Black
Red="\[\033[0;31m\]"          # Red
Green="\[\033[0;32m\]"        # Green
Yellow="\[\033[0;33m\]"       # Yellow
Blue="\[\033[0;34m\]"         # Blue
#Purple="\[\033[0;35m\]"       # Purple
#Cyan="\[\033[0;36m\]"         # Cyan
#White="\[\033[0;37m\]"        # White

# Bold
BBlack="\[\033[1;30m\]"       # Black
BRed="\[\033[1;31m\]"         # Red
BGreen="\[\033[1;32m\]"       # Green
#BYellow="\[\033[1;33m\]"      # Yellow
#BBlue="\[\033[1;34m\]"        # Blue
#BPurple="\[\033[1;35m\]"      # Purple
#BCyan="\[\033[1;36m\]"        # Cyan
#BWhite="\[\033[1;37m\]"       # White

# Underline
#UBlack="\[\033[4;30m\]"       # Black
#URed="\[\033[4;31m\]"         # Red
#UGreen="\[\033[4;32m\]"       # Green
#UYellow="\[\033[4;33m\]"      # Yellow
#UBlue="\[\033[4;34m\]"        # Blue
#UPurple="\[\033[4;35m\]"      # Purple
#UCyan="\[\033[4;36m\]"        # Cyan
#UWhite="\[\033[4;37m\]"       # White

# Background
#On_Black="\[\033[40m\]"       # Black
#On_Red="\[\033[41m\]"         # Red
#On_Green="\[\033[42m\]"       # Green
#On_Yellow="\[\033[43m\]"      # Yellow
#On_Blue="\[\033[44m\]"        # Blue
#On_Purple="\[\033[45m\]"      # Purple
#On_Cyan="\[\033[46m\]"        # Cyan
#On_White="\[\033[47m\]"       # White

# High Intensty
#IBlack="\[\033[0;90m\]"       # Black
IRed="\[\033[0;91m\]"         # Red
#IGreen="\[\033[0;92m\]"       # Green
#IYellow="\[\033[0;93m\]"      # Yellow
#IBlue="\[\033[0;94m\]"        # Blue
#IPurple="\[\033[0;95m\]"      # Purple
#ICyan="\[\033[0;96m\]"        # Cyan
#IWhite="\[\033[0;97m\]"       # White

# Bold High Intensty
#BIBlack="\[\033[1;90m\]"      # Black
#BIRed="\[\033[1;91m\]"        # Red
#BIGreen="\[\033[1;92m\]"      # Green
BIYellow="\[\033[1;93m\]"     # Yellow
BIBlue="\[\033[1;94m\]"       # Blue
#BIPurple="\[\033[1;95m\]"     # Purple
#BICyan="\[\033[1;96m\]"       # Cyan
#BIWhite="\[\033[1;97m\]"      # White

# High Intensty backgrounds
#On_IBlack="\[\033[0;100m\]"   # Black
#On_IRed="\[\033[0;101m\]"     # Red
#On_IGreen="\[\033[0;102m\]"   # Green
#On_IYellow="\[\033[0;103m\]"  # Yellow
#On_IBlue="\[\033[0;104m\]"    # Blue
#On_IPurple="\[\033[10;95m\]"  # Purple
#On_ICyan="\[\033[0;106m\]"    # Cyan
#On_IWhite="\[\033[0;107m\]"   # White

# Various variables you might want for your PS1 prompt instead
Time12h="\T"
Time24h="\t"
Time12a="\@"
PathShort="\w"
PathFull="\W"
NewLine="\n"
Jobs="\j"


# This PS1 snippet was adopted from code for MAC/BSD I saw from: http://allancraig.net/index.php?option=com_content&view=article&id=108:ps1-export-command-for-git&catid=45:general&Itemid=96
# I tweaked it to work on UBUNTU 11.04 & 11.10 plus made it mo' better

export PS1=$Yellow$Time24h' ['$BGreen'$(whoami)'$BBlack'@'$BRed'$(hostname)'$BBlack':'$BIBlue$PathShort$BBlack']'$Color_Off'$(git branch &>/dev/null;\
if [ $? -eq 0 ]; then \
  echo "$(echo `git status` | grep "nothing to commit" > /dev/null 2>&1; \
  if [ "$?" -eq "0" ]; then \
    if [[ -n $(git log --branches --not --remotes) ]]; then \
      # @5 - Clean repository - nothing to commit but with unpushed commits
      echo "'$Yellow'"$(__git_ps1 " [%s]"); \
    else \
      # @4 - Clean repository - nothing to commit
      echo "'$Green'"$(__git_ps1 " (%s)"); \
    fi \
  else \
    # @6 - Changes to working tree
    echo "'$IRed'"$(__git_ps1 " {%s}"); \
  fi) '$Color_Off'\n\$ "; \
else \
  # @2 - Prompt when not in GIT repo
  echo " '$Color_Off'\n\$ "; \
fi)'
